<?php

/**
 * –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: php test-websocket.php
 */

class WebSocketTestClient
{
    private $socket;
    private $host;
    private $port;
    private $path;

    public function __construct($host = 'localhost', $port = 8080, $path = '/')
    {
        $this->host = $host;
        $this->port = $port;
        $this->path = $path;
    }

    public function connect()
    {
        echo "üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...\n";
        
        $address = "tcp://{$this->host}:{$this->port}";
        $this->socket = stream_socket_client($address, $errno, $errstr, 30);
        
        if (!$this->socket) {
            echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: $errstr ($errno)\n";
            return false;
        }

        echo "‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ WebSocket handshake
        $key = base64_encode(openssl_random_pseudo_bytes(16));
        $headers = "GET {$this->path} HTTP/1.1\r\n";
        $headers .= "Host: {$this->host}:{$this->port}\r\n";
        $headers .= "Upgrade: websocket\r\n";
        $headers .= "Connection: Upgrade\r\n";
        $headers .= "Sec-WebSocket-Key: {$key}\r\n";
        $headers .= "Sec-WebSocket-Version: 13\r\n";
        $headers .= "\r\n";

        fwrite($this->socket, $headers);
        
        // –ß–∏—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        $response = fread($this->socket, 2048);
        
        if (strpos($response, '101 Switching Protocols') !== false) {
            echo "‚úÖ WebSocket handshake —É—Å–ø—ñ—à–Ω–∏–π\n";
            return true;
        } else {
            echo "‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket handshake\n";
            echo "–í—ñ–¥–ø–æ–≤—ñ–¥—å: $response\n";
            return false;
        }
    }

    public function send($message)
    {
        if (!$this->socket) {
            echo "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è\n";
            return false;
        }

        $frame = $this->createFrame($message);
        fwrite($this->socket, $frame);
        echo "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: $message\n";
        return true;
    }

    public function receive()
    {
        if (!$this->socket) {
            return false;
        }

        $data = fread($this->socket, 2048);
        if ($data) {
            $message = $this->parseFrame($data);
            echo "üì• –û—Ç—Ä–∏–º–∞–Ω–æ: $message\n";
            return $message;
        }
        return false;
    }

    public function close()
    {
        if ($this->socket) {
            fclose($this->socket);
            echo "üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ\n";
        }
    }

    private function createFrame($payload)
    {
        $length = strlen($payload);
        $frame = chr(129); // FIN + text frame
        
        if ($length <= 125) {
            $frame .= chr($length);
        } elseif ($length <= 65535) {
            $frame .= chr(126) . pack('n', $length);
        } else {
            $frame .= chr(127) . pack('J', $length);
        }
        
        return $frame . $payload;
    }

    private function parseFrame($data)
    {
        $opcode = ord($data[0]) & 0x0F;
        $length = ord($data[1]) & 0x7F;
        $offset = 2;
        
        if ($length === 126) {
            $length = unpack('n', substr($data, 2, 2))[1];
            $offset = 4;
        } elseif ($length === 127) {
            $length = unpack('J', substr($data, 2, 8))[1];
            $offset = 10;
        }
        
        $payload = substr($data, $offset, $length);
        return $payload;
    }
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞\n";
echo "================================\n\n";

$client = new WebSocketTestClient();

if ($client->connect()) {
    // –¢–µ—Å—Ç 1: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    echo "\nüìù –¢–µ—Å—Ç 1: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n";
    $client->send(json_encode([
        'type' => 'message',
        'content' => '–ü—Ä–∏–≤—ñ—Ç –∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞!',
        'timestamp' => date('Y-m-d H:i:s')
    ]));
    
    // –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    sleep(1);
    $client->receive();
    
    // –¢–µ—Å—Ç 2: Ping
    echo "\nüèì –¢–µ—Å—Ç 2: Ping\n";
    $client->send(json_encode([
        'type' => 'ping',
        'timestamp' => date('Y-m-d H:i:s')
    ]));
    
    sleep(1);
    $client->receive();
    
    // –¢–µ—Å—Ç 3: –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    echo "\nüö™ –¢–µ—Å—Ç 3: –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏\n";
    $client->send(json_encode([
        'type' => 'join_room',
        'room' => 'test-room',
        'timestamp' => date('Y-m-d H:i:s')
    ]));
    
    sleep(1);
    $client->receive();
    
    echo "\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n";
} else {
    echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞\n";
    echo "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π:\n";
    echo "  lando websocket\n";
}

$client->close(); 